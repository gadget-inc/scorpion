---
http_interactions:
- request:
    method: get
    uri: https://homesick.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin19.2.0 x86_64) ruby/2.7.0p0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Mar 2020 16:27:09 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=deef75c9684c3aac97167847d47c3c5751584635229; expires=Sat, 18-Apr-20
        16:27:09 GMT; path=/; domain=.homesick.com; HttpOnly; SameSite=Lax
      - _landing_page=%2F; Expires=Thu, 02-Apr-20 16:27:09 GMT; Path=/; HttpOnly
      - _orig_referrer=; Expires=Thu, 02-Apr-20 16:27:09 GMT; Path=/; HttpOnly
      - _shopify_country=Canada; path=/
      - _shopify_y=801de5c1-6715-4197-9a71-87f0e8ab6997; path=/; expires=Sun, 20 Mar
        2022 04:05:33 GMT
      - cart_currency=USD; path=/; expires=Thu, 02 Apr 2020 16:27:09 GMT
      - cart_sig=; path=/; expires=Thu, 02 Apr 2020 16:27:09 GMT; HttpOnly
      - secure_customer_sig=; path=/; expires=Mon, 19 Mar 2040 16:27:09 GMT; secure;
        HttpOnly
      X-Sorting-Hat-Podid:
      - '61'
      X-Sorting-Hat-Shopid:
      - '9876688'
      X-Shopid:
      - '9876688'
      X-Shardid:
      - '61'
      Content-Language:
      - en
      X-Shopify-Generated-Cart-Token:
      - 4b0ba4b1425be6de733e82dcb32900dc
      Vary:
      - Accept
      Strict-Transport-Security:
      - max-age=7889238
      Etag:
      - cacheable:5bb06596d2394250532065b7d375ec33
      X-Alternate-Cache-Key:
      - cacheable:d237439443a6e5d54a8d79b755cd3454
      X-Cache:
      - hit, server
      X-Shopify-Stage:
      - production
      Content-Security-Policy:
      - block-all-mixed-content; frame-ancestors *; upgrade-insecure-requests; report-uri
        /csp-report?source%5Baction%5D=index&source%5Bapp%5D=Shopify&source%5Bcontroller%5D=storefront_section%2Fshop&source%5Bsection%5D=storefront&source%5Buuid%5D=8d82be01-3a13-4a2a-8344-58ce52b754bd
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Xss-Protection:
      - 1; mode=block; report=/xss-report?source%5Baction%5D=index&source%5Bapp%5D=Shopify&source%5Bcontroller%5D=storefront_section%2Fshop&source%5Bsection%5D=storefront&source%5Buuid%5D=8d82be01-3a13-4a2a-8344-58ce52b754bd
      X-Dc:
      - gcp-us-central1,gcp-us-east1,gcp-us-east1
      Nel:
      - '{"report_to":"network-errors","max_age":2592000,"failure_fraction":0.01,"success_fraction":0.0001}'
      - '{"report_to":"network-errors","max_age":2592000,"failure_fraction":0.01,"success_fraction":0.0001}'
      Report-To:
      - '{"group":"network-errors","max_age":2592000,"endpoints":[{"url":"https://monorail-edge.shopifycloud.com/v1/reports/nel/20190325/shopify"}]}'
      - '{"group":"network-errors","max_age":2592000,"endpoints":[{"url":"https://monorail-edge.shopifycloud.com/v1/reports/nel/20190325/shopify"}]}'
      X-Request-Id:
      - 8d82be01-3a13-4a2a-8344-58ce52b754bd
      Cf-Cache-Status:
      - DYNAMIC
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 57688f2a69dfca94-YYZ
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-25=":443"; ma=86400, h3-24=":443"; ma=86400, h3-23=":443";
        ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Thu, 19 Mar 2020 16:27:09 GMT
recorded_with: VCR 5.1.0
